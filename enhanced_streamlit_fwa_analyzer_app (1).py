# -*- coding: utf-8 -*-
"""Enhanced Streamlit FWA Analyzer App

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C8wP7JzitQFHgUAP0pqbbA6QYNXSvYwN
"""

# -*- coding: utf-8 -*-
"""
Enhanced Streamlit FWA Analyzer App

This application is an enhanced version of the original FWA Medical Claim Analyzer.
It includes several new features to improve user experience and functionality:
1.  **PDF Viewer:** Users can now view the uploaded PDF directly within the app's interface.
2.  **Page Selection:** Users can choose specific pages of the PDF to send for analysis, improving efficiency.
3.  **Enhanced UI:** The interface uses icons, columns, and expanders for a more professional and intuitive layout.
4.  **Reset Button:** A dedicated button to clear the session state and start over.
5.  **Session State Management:** The app now uses st.session_state to persist data across user interactions,
    providing a smoother user experience and preventing unnecessary re-runs.

This code is designed for a client demonstration, focusing on a clean and robust presentation.
"""

import streamlit as st
import boto3
import os
import uuid
from PyPDF2 import PdfReader
import base64
from io import BytesIO

# --- Configuration ---
# IMPORTANT: DO NOT hardcode AWS credentials here.
# Use environment variables or Streamlit Secrets.
# For this demo, we'll use placeholder defaults.
DEFAULT_AWS_REGION = os.getenv('AWS_REGION', 'ap-south-1')
DEFAULT_AGENT_ID = '5GILSDVVQO'
DEFAULT_AGENT_ALIAS_ID = 'TSTALIASID'

# --- Helper Functions ---

def extract_text_from_pdf_pages(uploaded_file, pages):
    """
    Extracts text from specified pages of an uploaded PDF file.
    Args:
        uploaded_file: A file-like object from st.file_uploader.
        pages (list): A list of page numbers (1-indexed) to extract text from.
    Returns:
        str: Extracted text, or empty string if an error occurs.
    """
    text = ""
    try:
        reader = PdfReader(uploaded_file)
        # Convert 1-indexed page numbers to 0-indexed for PyPDF2
        page_indices = [p - 1 for p in pages if 0 < p <= len(reader.pages)]
        for i in page_indices:
            page_text = reader.pages[i].extract_text()
            if page_text:
                text += f"--- Page {i+1} ---\n{page_text}\n\n"
        return text.strip()
    except Exception as e:
        st.error(f"Error reading PDF: {e}")
        return ""

def query_bedrock_agent(text, agent_id, agent_alias_id, aws_region):
    """
    Sends text to a Bedrock Agent and retrieves the response.
    Args:
        text (str): The text content to be analyzed.
        agent_id (str): The ID of the Bedrock agent.
        agent_alias_id (str): The alias ID of the Bedrock agent.
        aws_region (str): The AWS region where the agent is deployed.
    Returns:
        str: The AI's analysis, or None if an error occurs.
    """
    try:
        client = boto3.client('bedrock-agent-runtime', region_name=aws_region)
        session_id = str(uuid.uuid4())

        # The prompt is slightly adjusted to be clear for the AI agent
        prompt = (
            "Please analyze the following medical claim for potential Fraud, Waste, and Abuse. "
            "Provide a detailed and concise report based on the provided text.\n\n"
            f"Claim Text:\n{text}"
        )

        response = client.invoke_agent(
            agentId=agent_id,
            agentAliasId=agent_alias_id,
            sessionId=session_id,
            inputText=prompt
        )

        completion = ""
        for event in response['completion']:
            chunk = event.get('chunk')
            if chunk and 'bytes' in chunk:
                completion += chunk['bytes'].decode('utf-8')

        return completion

    except Exception as e:
        st.error(f"Error invoking Bedrock agent: {e}")
        st.warning("Please ensure your AWS credentials are correctly configured and the Bedrock Agent is 'AVAILABLE'.")
        return None

def display_pdf(uploaded_file):
    """
    Displays the uploaded PDF in an embedded iframe.
    """
    # Read the file and encode it to base64
    base64_pdf = base64.b64encode(uploaded_file.read()).decode('utf-8')
    # Create an HTML iframe with the base64 data URI
    pdf_display = f"""
    <iframe
        src="data:application/pdf;base64,{base64_pdf}"
        width="100%"
        height="600"
        type="application/pdf"
        style="border: 2px solid #ddd; border-radius: 8px;">
    </iframe>"""
    # Use st.components to render the HTML
    st.components.v1.html(pdf_display, height=600, scrolling=True)

# --- Streamlit App Layout ---
st.set_page_config(page_title="FWA Sentinel", layout="wide", initial_sidebar_state="expanded")

# --- Title and Header ---
st.title("AI-Driven FWA Detection for Healthcare Systems")
st.markdown("""
This application leverages an **AWS Bedrock Agent** to analyze medical claims for potential FWA.
The enhanced version allows you to **view the PDF** and **select specific pages** for analysis.
""")

# --- State Management Initialization ---
if 'uploaded_file_name' not in st.session_state:
    st.session_state['uploaded_file_name'] = None
if 'pdf_text' not in st.session_state:
    st.session_state['pdf_text'] = ""
if 'agent_response' not in st.session_state:
    st.session_state['agent_response'] = None
if 'pdf_pages' not in st.session_state:
    st.session_state['pdf_pages'] = []

# --- Left Column: Input and Control Panel ---
col1, col2 = st.columns([1, 2])

with col1:
    st.subheader("üìÅ Claim Document & Settings")

    # File uploader
    uploaded_file = st.file_uploader("Upload a Medical Claim PDF", type="pdf", key="file_uploader")

    # If a new file is uploaded, reset session state variables
    if uploaded_file and uploaded_file.name != st.session_state.uploaded_file_name:
        st.session_state.uploaded_file_name = uploaded_file.name
        st.session_state.pdf_text = ""
        st.session_state.agent_response = None
        st.session_state.pdf_pages = []

    # Display page selection and PDF viewer if a file is uploaded
    if uploaded_file:
        # Get total number of pages
        pdf_reader = PdfReader(BytesIO(uploaded_file.getvalue()))
        total_pages = len(pdf_reader.pages)
        st.info(f"PDF has {total_pages} page(s).")

        # Multiselect for page numbers
        page_options = list(range(1, total_pages + 1))
        selected_pages = st.multiselect(
            "Select pages for analysis:",
            options=page_options,
            default=page_options, # Default to all pages
            help="Choose the pages you want the AI to analyze."
        )

        st.session_state.pdf_pages = selected_pages

    # Analysis and Reset buttons
    st.markdown("---")

    if st.button("üöÄ Analyze Claim", use_container_width=True):
        if uploaded_file is None:
            st.error("Please upload a PDF file first.")
        elif not st.session_state.pdf_pages:
            st.warning("Please select at least one page for analysis.")
        else:
            with st.spinner("Extracting text from PDF..."):
                pdf_text = extract_text_from_pdf_pages(
                    BytesIO(uploaded_file.getvalue()),
                    st.session_state.pdf_pages
                )

            st.session_state['pdf_text'] = pdf_text

            if st.session_state['pdf_text']:
                with st.spinner("üß† Sending text to Bedrock Agent for analysis..."):
                    agent_response = query_bedrock_agent(
                        st.session_state['pdf_text'],
                        DEFAULT_AGENT_ID,
                        DEFAULT_AGENT_ALIAS_ID,
                        DEFAULT_AWS_REGION
                    )

                st.session_state['agent_response'] = agent_response

    # Reset button to clear session state
    if st.button("üîÑ Reset App", use_container_width=True):
        st.session_state.clear()
        st.experimental_rerun()

    with st.expander("Advanced Configuration"):
        st.text_input("Bedrock Agent ID", value=DEFAULT_AGENT_ID, disabled=True)
        st.text_input("Bedrock Agent Alias ID", value=DEFAULT_AGENT_ALIAS_ID, disabled=True)
        st.text_input("AWS Region", value=DEFAULT_AWS_REGION, disabled=True)

# --- Right Column: PDF Viewer and Report ---
with col2:
    if uploaded_file:
        st.subheader("üìÑ PDF Document Viewer")
        # Rewind the file pointer to the beginning for the viewer
        uploaded_file.seek(0)
        display_pdf(uploaded_file)

        st.markdown("---")
        st.subheader("üìã Extracted Text (for Review)")
        if st.session_state.pdf_text:
            st.text_area("Extracted Text", st.session_state.pdf_text, height=200, disabled=True)
        else:
            st.info("The extracted text will appear here after you click 'Analyze Claim'.")

    st.subheader("üîç FWA Analysis Report")
    if st.session_state['agent_response']:
        st.success("‚úÖ Analysis Complete!")
        with st.expander("View Full Report"):
            st.write(st.session_state['agent_response'])
    elif uploaded_file:
        st.info("Click 'Analyze Claim' to view the report.")
    else:
        st.info("Upload a PDF file to begin the FWA analysis.")